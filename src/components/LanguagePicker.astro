---
import { languages, LOCALES, type Locale } from "../i18n/ui";
const { locale } = Astro.locals as any;

const currentLocale = (locale ?? "en") as Locale;
const otherLocales = LOCALES.filter((l) => l !== currentLocale);
const currentPath = new URL(Astro.request.url).pathname;

function localizedHref(pathname: string, target: string) {
  const segments = pathname.split("/").filter(Boolean);
  const hasTrailingSlash = pathname.endsWith("/");

  if (segments.length > 0 && LOCALES.includes(segments[0] as Locale)) {
    // Currently prefixed
    if (target === "en") {
      // Drop prefix for default locale
      segments.shift();
    } else {
      // Replace prefix with selected target
      segments[0] = target;
    }
  } else {
    // Currently unprefixed
    if (target !== "en") {
      // Add prefix for non-default target
      segments.unshift(target);
    }
  }

  let href = "/" + segments.join("/");
  if (hasTrailingSlash) href += "/";
  if (href === "//") href = "/";
  return href;
}
---

<div class="relative language-picker">
  <button class="picker-trigger" aria-haspopup="listbox" aria-expanded="false">
    <span class="label">{languages[currentLocale]}</span>
    <svg
      class="chev"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 20 20"
      fill="currentColor"
      aria-hidden="true"
      ><path
        fill-rule="evenodd"
        d="M5.23 7.21a.75.75 0 011.06.02L10 11.06l3.71-3.83a.75.75 0 111.08 1.04l-4.24 4.38a.75.75 0 01-1.08 0L5.21 8.27a.75.75 0 01.02-1.06z"
        clip-rule="evenodd"></path></svg
    >
  </button>

  <ul class="picker-menu">
    {
      otherLocales.map((l) => (
        <li>
          <a href={localizedHref(currentPath, l)}>{languages[l]}</a>
        </li>
      ))
    }
  </ul>
</div>

<style>
  .picker-trigger {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.375rem 0.75rem;
    border-radius: 0.25rem;
    transition:
    box-shadow 200ms ease,
    transform 150ms ease;
  }
  .picker-trigger:hover {
    box-shadow: 0 2px 10px #00000012;
    background: rgba(255, 255, 255, 0.1);
  }
  .picker-trigger:active {
    transform: translateY(1px);
  }
  .chev {
    width: 1rem;
    height: 1rem;
    opacity: 0.7;
  }

  .picker-menu {
    position: absolute;
    right: 0;
    margin-top: 0.5rem;
    background: var(--color-dark);
    border-radius: 0.375rem;
    min-width: 9rem;
    padding: 0.25rem;
    list-style: none;
    box-shadow: 0 8px 30px #00000022;
    overflow: hidden;
    opacity: 0;
    transform: translateY(-4px);
    pointer-events: none;
    transition:
      opacity 180ms ease,
      transform 180ms ease;
  }

  .picker-menu a {
    display: block;
    padding: 0.5rem 0.75rem;
    text-decoration: none;
    color: inherit;
    border-radius: 0.25rem;
    transition: background-color 160ms ease;
  }
  .picker-menu a:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  /* Open states */
  .language-picker:hover .picker-menu,
  .language-picker:focus-within .picker-menu,
  .language-picker.open .picker-menu {
    opacity: 1;
    transform: translateY(0);
    pointer-events: auto;
    z-index: 10;
  }
</style>

<script type="module">
  document.querySelectorAll(".language-picker").forEach((root) => {
    const trigger = root.querySelector(".picker-trigger");
    let hoverTimeout;

    root.addEventListener("mouseenter", () => {
      clearTimeout(hoverTimeout);
      root.classList.add("open");
      trigger?.setAttribute("aria-expanded", "true");
    });

    root.addEventListener("mouseleave", () => {
      hoverTimeout = setTimeout(() => {
        root.classList.remove("open");
        trigger?.setAttribute("aria-expanded", "false");
      }, 250);
    });
  });
</script>
